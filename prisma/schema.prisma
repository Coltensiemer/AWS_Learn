// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PRODUCTION")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  CompletedQuiz CompletedQuiz[]
  QuizProgress QuizProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id             Int      @id @default(autoincrement())
  tag            String
  question       String
  correct_answer String
  options        Option[]
}

model Option {
  id        Int     @id @default(autoincrement())
  value     String
  isCorrect Boolean
  quiz      Quiz    @relation(fields: [quizId], references: [id])
  quizId    Int
}


// model for completed quiz
model CompletedQuiz {
  id        String   @id @default(cuid())
  quizIDUsed   Int[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    String? 
  correctAnswers Int[]
  incorrectAnswers Int[]
  tags      String[]
  score     Int?
  startTimer Int?
  finishedAt Int
  quizDate  DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

//Model for user's progress when quiz is in progress
model QuizProgress {
  id        String   @id @default(cuid())
  quizIDUsed   Int[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    String? 
  correctAnswers Int[]
  incorrectAnswers Int[] 
  tags     String[]
  currentQuestion Int
  currentTimer Int? 
  quiztimer Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}