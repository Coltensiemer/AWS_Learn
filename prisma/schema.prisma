// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native","rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = env("DATABASE_URL_LOCAL")
}

model user {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  password      String
  completedquiz completedquiz[]
  quizprogress  quizprogress[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model fakeuser {
  id            String          @id @default(cuid())
  cookieid      String          @unique
  completedquiz completedquiz[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model quiz {
  id             Int      @id @default(autoincrement())
  tag            String
  sub_tag        String
  question       String
  correct_answer String[]
  options        option[]
}

model option {
  id        Int     @id @default(autoincrement())
  value     String
  iscorrect Boolean
  quiz      quiz    @relation(fields: [quizId], references: [id])
  quizId    Int
}

// model for completed quiz
model completedquiz {
  id               String    @id @default(cuid())
  quizidused       Int[]
  user             user?     @relation(fields: [userId], references: [id])
  userId           String?
  fakeuser         fakeuser? @relation(fields: [cookieid], references: [id])
  cookieid       String?
  correctanswers   Int[]
  incorrectanswers Int[]
  quizselectedoptions Json 
  tags             String[]
  score            Int?
  starttimer       Int?
  finishedat       Int
  quizDate         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

//Model for user's progress when quiz is in progress
model quizprogress {
  id               String   @id @default(cuid())
  quizidused       Int[]
  user             user?    @relation(fields: [userId], references: [id])
  userId           String?
  correctanswers   Int[]
  incorrectanswers Int[]
  quizselectedoptions Json? 
  tags             String[]
  currentquestion  Int
  currenttimer     Int?
  quiztimer        Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
